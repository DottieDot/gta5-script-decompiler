use num_enum::{IntoPrimitive, TryFromPrimitive};

#[repr(u8)]
#[derive(TryFromPrimitive, IntoPrimitive, PartialEq, Eq, Clone, Copy)]
pub enum Opcode {
  Nop,
  IntegerAdd,
  IntegerSubtract,
  IntegerMultiply,
  IntegerDivide,
  IntegerModulo,
  IntegerNot,
  IntegerNegate,
  IntegerEquals,
  IntegerNotEquals,
  IntegerGreaterThan,
  IntegerGreaterOrEqual,
  IntegerLowerThan,
  IntegerLowerOrEqual,
  FloatAdd,
  FloatSubtract,
  FloatMultiply,
  FloatDivide,
  FloatModule,
  FloatNegate,
  FloatEquals,
  FloatNotEquals,
  FloatGreaterThan,
  FloatGreaterOrEqual,
  FloatLowerThan,
  FloatLowerOrEqual,
  VectorAdd,
  VectorSubtract,
  VectorMultiply,
  VectorDivide,
  VectorNegate,
  BitwiseAnd,
  BitwiseOr,
  BitwiseXor,
  IntegerToFloat,
  FloatToInteger,
  FloatToVector,
  PushConstU8,
  PushConstU8U8,
  PushConstU8U8U8,
  PushConstU32,
  PushConstFloat,
  Dup,
  Drop,
  NativeCall,
  Enter,
  Leave,
  Load,
  Store,
  StoreRev,
  LoadN,
  StoreN,
  ArrayU8,
  ArrayU8Load,
  ArrayU8Store,
  LocalU8,
  LocalU8Load,
  LocalU8Store,
  StaticU8,
  StaticU8Load,
  StaticU8Store,
  AddU8,
  MultiplyU8,
  Offset,
  OffsetU8,
  OffsetU8Load,
  OffsetU8Store,
  PushConstS16,
  AddS16,
  MultiplyS16,
  OffsetS16,
  OffsetS16Load,
  OffsetS16Store,
  ArrayU16,
  ArrayU16Load,
  ArrayU16Store,
  LocalU16,
  LocalU16Load,
  LocalU16Store,
  StaticU16,
  StaticU16Load,
  StaticU16Store,
  GlobalU16,
  GlobalU16Load,
  GlobalU16Store,
  Jump,
  JumpZero,
  IfEqualJumpZero,
  IfNotEqualJumpZero,
  IfGreaterThanJumpZero,
  IfGreaterOrEqualJumpZero,
  IfLowerThanJumpZero,
  IfLowerOrEqualJumpZero,
  FunctionCall,
  StaticU24,
  StaticU24Load,
  StaticU24Store,
  GlobalU24,
  GlobalU24Load,
  GlobalU24Store,
  PushConstU24,
  Switch,
  String,
  StringHash,
  TextLabelAssignString,
  TextLabelAssignInt,
  TextLabelAppendString,
  TextLabelAppendInt,
  TextLabelCopy,
  Catch,
  Throw,
  CallIndirect,
  PushConstM1,
  PushConst0,
  PushConst1,
  PushConst2,
  PushConst3,
  PushConst4,
  PushConst5,
  PushConst6,
  PushConst7,
  PushConstFm1,
  PushConstF0,
  PushConstF1,
  PushConstF2,
  PushConstF3,
  PushConstF4,
  PushConstF5,
  PushConstF6,
  PushConstF7,
  BitTest
}

impl Opcode {
  pub fn size(self, bytes: &[u8]) -> u16 {
    match self {
      Opcode::Nop => 1,
      Opcode::IntegerAdd => 1,
      Opcode::IntegerSubtract => 1,
      Opcode::IntegerMultiply => 1,
      Opcode::IntegerDivide => 1,
      Opcode::IntegerModulo => 1,
      Opcode::IntegerNot => 1,
      Opcode::IntegerNegate => 1,
      Opcode::IntegerEquals => 1,
      Opcode::IntegerNotEquals => 1,
      Opcode::IntegerGreaterThan => 1,
      Opcode::IntegerGreaterOrEqual => 1,
      Opcode::IntegerLowerThan => 1,
      Opcode::IntegerLowerOrEqual => 1,
      Opcode::FloatAdd => 1,
      Opcode::FloatSubtract => 1,
      Opcode::FloatMultiply => 1,
      Opcode::FloatDivide => 1,
      Opcode::FloatModule => 1,
      Opcode::FloatNegate => 1,
      Opcode::FloatEquals => 1,
      Opcode::FloatNotEquals => 1,
      Opcode::FloatGreaterThan => 1,
      Opcode::FloatGreaterOrEqual => 1,
      Opcode::FloatLowerThan => 1,
      Opcode::FloatLowerOrEqual => 1,
      Opcode::VectorAdd => 1,
      Opcode::VectorSubtract => 1,
      Opcode::VectorMultiply => 1,
      Opcode::VectorDivide => 1,
      Opcode::VectorNegate => 1,
      Opcode::BitwiseAnd => 1,
      Opcode::BitwiseOr => 1,
      Opcode::BitwiseXor => 1,
      Opcode::IntegerToFloat => 1,
      Opcode::FloatToInteger => 1,
      Opcode::FloatToVector => 1,
      Opcode::PushConstU8 => 2,
      Opcode::PushConstU8U8 => 3,
      Opcode::PushConstU8U8U8 => 4,
      Opcode::PushConstU32 => 5,
      Opcode::PushConstFloat => 5,
      Opcode::Dup => 1,
      Opcode::Drop => 1,
      Opcode::NativeCall => 4,
      Opcode::Enter => 5 + bytes[4] as u16,
      Opcode::Leave => 3,
      Opcode::Load => 1,
      Opcode::Store => 1,
      Opcode::StoreRev => 1,
      Opcode::LoadN => 1,
      Opcode::StoreN => 1,
      Opcode::ArrayU8 => 2,
      Opcode::ArrayU8Load => 2,
      Opcode::ArrayU8Store => 2,
      Opcode::LocalU8 => 2,
      Opcode::LocalU8Load => 2,
      Opcode::LocalU8Store => 2,
      Opcode::StaticU8 => 2,
      Opcode::StaticU8Load => 2,
      Opcode::StaticU8Store => 2,
      Opcode::AddU8 => 2,
      Opcode::MultiplyU8 => 2,
      Opcode::Offset => 1,
      Opcode::OffsetU8 => 2,
      Opcode::OffsetU8Load => 2,
      Opcode::OffsetU8Store => 2,
      Opcode::PushConstS16 => 3,
      Opcode::AddS16 => 3,
      Opcode::MultiplyS16 => 3,
      Opcode::OffsetS16 => 3,
      Opcode::OffsetS16Load => 3,
      Opcode::OffsetS16Store => 3,
      Opcode::ArrayU16 => 3,
      Opcode::ArrayU16Load => 3,
      Opcode::ArrayU16Store => 3,
      Opcode::LocalU16 => 3,
      Opcode::LocalU16Load => 3,
      Opcode::LocalU16Store => 3,
      Opcode::StaticU16 => 3,
      Opcode::StaticU16Load => 3,
      Opcode::StaticU16Store => 3,
      Opcode::GlobalU16 => 3,
      Opcode::GlobalU16Load => 3,
      Opcode::GlobalU16Store => 3,
      Opcode::Jump => 3,
      Opcode::JumpZero => 3,
      Opcode::IfEqualJumpZero => 3,
      Opcode::IfNotEqualJumpZero => 3,
      Opcode::IfGreaterThanJumpZero => 3,
      Opcode::IfGreaterOrEqualJumpZero => 3,
      Opcode::IfLowerThanJumpZero => 3,
      Opcode::IfLowerOrEqualJumpZero => 3,
      Opcode::FunctionCall => 4,
      Opcode::StaticU24 => 4,
      Opcode::StaticU24Load => 4,
      Opcode::StaticU24Store => 4,
      Opcode::GlobalU24 => 4,
      Opcode::GlobalU24Load => 4,
      Opcode::GlobalU24Store => 4,
      Opcode::PushConstU24 => 4,
      Opcode::Switch => 2 + bytes[1] as u16 * 6,
      Opcode::String => 1,
      Opcode::StringHash => 1,
      Opcode::TextLabelAssignString => 2,
      Opcode::TextLabelAssignInt => 2,
      Opcode::TextLabelAppendString => 2,
      Opcode::TextLabelAppendInt => 2,
      Opcode::TextLabelCopy => 1,
      Opcode::Catch => 1,
      Opcode::Throw => 1,
      Opcode::CallIndirect => 1,
      Opcode::PushConstM1 => 1,
      Opcode::PushConst0 => 1,
      Opcode::PushConst1 => 1,
      Opcode::PushConst2 => 1,
      Opcode::PushConst3 => 1,
      Opcode::PushConst4 => 1,
      Opcode::PushConst5 => 1,
      Opcode::PushConst6 => 1,
      Opcode::PushConst7 => 1,
      Opcode::PushConstFm1 => 1,
      Opcode::PushConstF0 => 1,
      Opcode::PushConstF1 => 1,
      Opcode::PushConstF2 => 1,
      Opcode::PushConstF3 => 1,
      Opcode::PushConstF4 => 1,
      Opcode::PushConstF5 => 1,
      Opcode::PushConstF6 => 1,
      Opcode::PushConstF7 => 1,
      Opcode::BitTest => 1
    }
  }
}
